
Dynamic Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000644  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000644  000006d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800062  00800062  000006da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ab  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c8  00000000  00000000  000018d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a33  00000000  00000000  0000219b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068f  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000086a  00000000  00000000  0000340b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003c75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_11>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	7a 01       	movw	r14, r20
  56:	7f 01       	movw	r14, r30
  58:	84 01       	movw	r16, r8
  5a:	89 01       	movw	r16, r18
  5c:	8e 01       	movw	r16, r28
  5e:	93 01       	movw	r18, r6
  60:	98 01       	movw	r18, r16

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e4 e4       	ldi	r30, 0x44	; 68
  76:	f6 e0       	ldi	r31, 0x06	; 6
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a2 36       	cpi	r26, 0x62	; 98
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a2 e6       	ldi	r26, 0x62	; 98
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a8 38       	cpi	r26, 0x88	; 136
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  98:	0c 94 20 03 	jmp	0x640	; 0x640 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <t2>:
		TMU_Stop(1,t1);
	}
}
void t2 (void)
{
   TOGGLE_BIT(PORTA_DATA,BIT1);
  a0:	9b b3       	in	r25, 0x1b	; 27
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	89 27       	eor	r24, r25
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	08 95       	ret

000000aa <t3>:
}
void t3 (void)
{
	TOGGLE_BIT(PORTA_DATA,BIT2);
  aa:	9b b3       	in	r25, 0x1b	; 27
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	89 27       	eor	r24, r25
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	08 95       	ret

000000b4 <t4>:
}
void t4 (void)
{
	TOGGLE_BIT(PORTA_DATA,BIT3);
  b4:	9b b3       	in	r25, 0x1b	; 27
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	89 27       	eor	r24, r25
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	08 95       	ret

000000be <t1>:
    }
}

void t1 (void)
{
   TOGGLE_BIT(PORTA_DATA,BIT0);
  be:	9b b3       	in	r25, 0x1b	; 27
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	89 27       	eor	r24, r25
  c4:	8b bb       	out	0x1b, r24	; 27
	c++;
  c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  ca:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
  d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	if (c == 100)
  d8:	84 36       	cpi	r24, 0x64	; 100
  da:	91 05       	cpc	r25, r1
  dc:	29 f4       	brne	.+10     	; 0xe8 <t1+0x2a>
	{
	   TMU_Stop(1,t2);
  de:	60 e5       	ldi	r22, 0x50	; 80
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 88 02 	call	0x510	; 0x510 <TMU_Stop>
	}
	if (c == 200)
  e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  ec:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
  f0:	88 3c       	cpi	r24, 0xC8	; 200
  f2:	91 05       	cpc	r25, r1
  f4:	29 f4       	brne	.+10     	; 0x100 <t1+0x42>
	{
		TMU_Stop(3,t3);
  f6:	65 e5       	ldi	r22, 0x55	; 85
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	0e 94 88 02 	call	0x510	; 0x510 <TMU_Stop>
	}
	if (c == 500)
 100:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 104:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 108:	84 3f       	cpi	r24, 0xF4	; 244
 10a:	91 40       	sbci	r25, 0x01	; 1
 10c:	41 f4       	brne	.+16     	; 0x11e <t1+0x60>
	{
		TMU_Start(3,1,0,t2);
 10e:	20 e5       	ldi	r18, 0x50	; 80
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 bb 02 	call	0x576	; 0x576 <TMU_Start>
	}
	if (c == 800)
 11e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 122:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 126:	80 32       	cpi	r24, 0x20	; 32
 128:	93 40       	sbci	r25, 0x03	; 3
 12a:	29 f4       	brne	.+10     	; 0x136 <t1+0x78>
	{
		TMU_Stop(1,t2);
 12c:	60 e5       	ldi	r22, 0x50	; 80
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 88 02 	call	0x510	; 0x510 <TMU_Stop>
	}

	if (c == 1000)
 136:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 13a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 13e:	88 3e       	cpi	r24, 0xE8	; 232
 140:	93 40       	sbci	r25, 0x03	; 3
 142:	29 f4       	brne	.+10     	; 0x14e <t1+0x90>
	{
		TMU_Stop(1,t1);
 144:	6f e5       	ldi	r22, 0x5F	; 95
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 88 02 	call	0x510	; 0x510 <TMU_Stop>
 14e:	08 95       	ret

00000150 <main>:

extern str_TMU_InitConfig_t init;
int main(void)
{
    
	 SET_BIT(PORTA_DIR,BIT0);
 150:	d0 9a       	sbi	0x1a, 0	; 26
	 SET_BIT(PORTA_DIR,BIT1);
 152:	d1 9a       	sbi	0x1a, 1	; 26
	 SET_BIT(PORTA_DIR,BIT2);
 154:	d2 9a       	sbi	0x1a, 2	; 26
	 SET_BIT(PORTA_DIR,BIT3);
 156:	d3 9a       	sbi	0x1a, 3	; 26
	 SET_BIT(PORTA_DIR,BIT6);
 158:	d6 9a       	sbi	0x1a, 6	; 26

	 TMU_Init(&init);
 15a:	86 e8       	ldi	r24, 0x86	; 134
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 28 02 	call	0x450	; 0x450 <TMU_Init>
	 
	 TMU_Start(10,1,0,t1);
 162:	2f e5       	ldi	r18, 0x5F	; 95
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 bb 02 	call	0x576	; 0x576 <TMU_Start>
	 TMU_Start(3,1,0,t2);
 172:	20 e5       	ldi	r18, 0x50	; 80
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 bb 02 	call	0x576	; 0x576 <TMU_Start>
	 TMU_Start(4,3,0,t3);
 182:	25 e5       	ldi	r18, 0x55	; 85
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	63 e0       	ldi	r22, 0x03	; 3
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 bb 02 	call	0x576	; 0x576 <TMU_Start>
	 TMU_Start(5,4,0,t4);
 192:	2a e5       	ldi	r18, 0x5A	; 90
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	64 e0       	ldi	r22, 0x04	; 4
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 bb 02 	call	0x576	; 0x576 <TMU_Start>
	 
	 /* Replace with your application code */
    while (1) 
    {
	    TMU_Dispatch();
 1a2:	0e 94 4e 02 	call	0x49c	; 0x49c <TMU_Dispatch>
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <main+0x52>

000001a8 <Timer_Init>:
	    Error |= E_NOK;
	    break;
    }

	 return Error;
 }
 1a8:	dc 01       	movw	r26, r24
 1aa:	89 2b       	or	r24, r25
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <Timer_Init+0x8>
 1ae:	d7 c0       	rjmp	.+430    	; 0x35e <Timer_Init+0x1b6>
 1b0:	8c 91       	ld	r24, X
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <Timer_Init+0x10>
 1b6:	45 c0       	rjmp	.+138    	; 0x242 <Timer_Init+0x9a>
 1b8:	20 f0       	brcs	.+8      	; 0x1c2 <Timer_Init+0x1a>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <Timer_Init+0x18>
 1be:	87 c0       	rjmp	.+270    	; 0x2ce <Timer_Init+0x126>
 1c0:	d0 c0       	rjmp	.+416    	; 0x362 <Timer_Init+0x1ba>
 1c2:	13 be       	out	0x33, r1	; 51
 1c4:	83 b7       	in	r24, 0x33	; 51
 1c6:	83 bf       	out	0x33, r24	; 51
 1c8:	83 b7       	in	r24, 0x33	; 51
 1ca:	83 bf       	out	0x33, r24	; 51
 1cc:	12 96       	adiw	r26, 0x02	; 2
 1ce:	8c 91       	ld	r24, X
 1d0:	12 97       	sbiw	r26, 0x02	; 2
 1d2:	84 30       	cpi	r24, 0x04	; 4
 1d4:	a9 f0       	breq	.+42     	; 0x200 <Timer_Init+0x58>
 1d6:	28 f4       	brcc	.+10     	; 0x1e2 <Timer_Init+0x3a>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	41 f0       	breq	.+16     	; 0x1ec <Timer_Init+0x44>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	59 f0       	breq	.+22     	; 0x1f6 <Timer_Init+0x4e>
 1e0:	1e c0       	rjmp	.+60     	; 0x21e <Timer_Init+0x76>
 1e2:	86 30       	cpi	r24, 0x06	; 6
 1e4:	91 f0       	breq	.+36     	; 0x20a <Timer_Init+0x62>
 1e6:	87 30       	cpi	r24, 0x07	; 7
 1e8:	a9 f0       	breq	.+42     	; 0x214 <Timer_Init+0x6c>
 1ea:	19 c0       	rjmp	.+50     	; 0x21e <Timer_Init+0x76>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_PreScaler_T0>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	15 c0       	rjmp	.+42     	; 0x220 <Timer_Init+0x78>
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_PreScaler_T0>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	10 c0       	rjmp	.+32     	; 0x220 <Timer_Init+0x78>
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_PreScaler_T0>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0b c0       	rjmp	.+22     	; 0x220 <Timer_Init+0x78>
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_PreScaler_T0>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	06 c0       	rjmp	.+12     	; 0x220 <Timer_Init+0x78>
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_PreScaler_T0>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	01 c0       	rjmp	.+2      	; 0x220 <Timer_Init+0x78>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	13 96       	adiw	r26, 0x03	; 3
 222:	9c 91       	ld	r25, X
 224:	99 23       	and	r25, r25
 226:	19 f0       	breq	.+6      	; 0x22e <Timer_Init+0x86>
 228:	91 30       	cpi	r25, 0x01	; 1
 22a:	21 f0       	breq	.+8      	; 0x234 <Timer_Init+0x8c>
 22c:	9c c0       	rjmp	.+312    	; 0x366 <Timer_Init+0x1be>
 22e:	99 b7       	in	r25, 0x39	; 57
 230:	99 bf       	out	0x39, r25	; 57
 232:	08 95       	ret
 234:	99 b7       	in	r25, 0x39	; 57
 236:	91 60       	ori	r25, 0x01	; 1
 238:	99 bf       	out	0x39, r25	; 57
 23a:	9f b7       	in	r25, 0x3f	; 63
 23c:	90 68       	ori	r25, 0x80	; 128
 23e:	9f bf       	out	0x3f, r25	; 63
 240:	08 95       	ret
 242:	1f bc       	out	0x2f, r1	; 47
 244:	1e bc       	out	0x2e, r1	; 46
 246:	8f b5       	in	r24, 0x2f	; 47
 248:	8c 7f       	andi	r24, 0xFC	; 252
 24a:	8f bd       	out	0x2f, r24	; 47
 24c:	8e b5       	in	r24, 0x2e	; 46
 24e:	87 7e       	andi	r24, 0xE7	; 231
 250:	8e bd       	out	0x2e, r24	; 46
 252:	8f b5       	in	r24, 0x2f	; 47
 254:	8f 70       	andi	r24, 0x0F	; 15
 256:	8f bd       	out	0x2f, r24	; 47
 258:	12 96       	adiw	r26, 0x02	; 2
 25a:	8c 91       	ld	r24, X
 25c:	12 97       	sbiw	r26, 0x02	; 2
 25e:	84 30       	cpi	r24, 0x04	; 4
 260:	a9 f0       	breq	.+42     	; 0x28c <Timer_Init+0xe4>
 262:	28 f4       	brcc	.+10     	; 0x26e <Timer_Init+0xc6>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	41 f0       	breq	.+16     	; 0x278 <Timer_Init+0xd0>
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	59 f0       	breq	.+22     	; 0x282 <Timer_Init+0xda>
 26c:	1e c0       	rjmp	.+60     	; 0x2aa <Timer_Init+0x102>
 26e:	86 30       	cpi	r24, 0x06	; 6
 270:	91 f0       	breq	.+36     	; 0x296 <Timer_Init+0xee>
 272:	87 30       	cpi	r24, 0x07	; 7
 274:	a9 f0       	breq	.+42     	; 0x2a0 <Timer_Init+0xf8>
 276:	19 c0       	rjmp	.+50     	; 0x2aa <Timer_Init+0x102>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_PreScaler_T1>
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	15 c0       	rjmp	.+42     	; 0x2ac <Timer_Init+0x104>
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_PreScaler_T1>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	10 c0       	rjmp	.+32     	; 0x2ac <Timer_Init+0x104>
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_PreScaler_T1>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0b c0       	rjmp	.+22     	; 0x2ac <Timer_Init+0x104>
 296:	84 e0       	ldi	r24, 0x04	; 4
 298:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_PreScaler_T1>
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	06 c0       	rjmp	.+12     	; 0x2ac <Timer_Init+0x104>
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_PreScaler_T1>
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <Timer_Init+0x104>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	99 b7       	in	r25, 0x39	; 57
 2ae:	93 7c       	andi	r25, 0xC3	; 195
 2b0:	99 bf       	out	0x39, r25	; 57
 2b2:	13 96       	adiw	r26, 0x03	; 3
 2b4:	9c 91       	ld	r25, X
 2b6:	99 23       	and	r25, r25
 2b8:	19 f0       	breq	.+6      	; 0x2c0 <Timer_Init+0x118>
 2ba:	91 30       	cpi	r25, 0x01	; 1
 2bc:	21 f0       	breq	.+8      	; 0x2c6 <Timer_Init+0x11e>
 2be:	55 c0       	rjmp	.+170    	; 0x36a <Timer_Init+0x1c2>
 2c0:	99 b7       	in	r25, 0x39	; 57
 2c2:	99 bf       	out	0x39, r25	; 57
 2c4:	08 95       	ret
 2c6:	99 b7       	in	r25, 0x39	; 57
 2c8:	94 60       	ori	r25, 0x04	; 4
 2ca:	99 bf       	out	0x39, r25	; 57
 2cc:	08 95       	ret
 2ce:	15 bc       	out	0x25, r1	; 37
 2d0:	85 b5       	in	r24, 0x25	; 37
 2d2:	85 bd       	out	0x25, r24	; 37
 2d4:	85 b5       	in	r24, 0x25	; 37
 2d6:	85 bd       	out	0x25, r24	; 37
 2d8:	12 96       	adiw	r26, 0x02	; 2
 2da:	ec 91       	ld	r30, X
 2dc:	12 97       	sbiw	r26, 0x02	; 2
 2de:	4e 2f       	mov	r20, r30
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	fa 01       	movw	r30, r20
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	e7 30       	cpi	r30, 0x07	; 7
 2e8:	f1 05       	cpc	r31, r1
 2ea:	38 f5       	brcc	.+78     	; 0x33a <Timer_Init+0x192>
 2ec:	e6 5d       	subi	r30, 0xD6	; 214
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	0c 94 1a 03 	jmp	0x634	; 0x634 <__tablejump2__>
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	1f c0       	rjmp	.+62     	; 0x33c <Timer_Init+0x194>
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	1a c0       	rjmp	.+52     	; 0x33c <Timer_Init+0x194>
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	15 c0       	rjmp	.+42     	; 0x33c <Timer_Init+0x194>
 312:	84 e0       	ldi	r24, 0x04	; 4
 314:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	10 c0       	rjmp	.+32     	; 0x33c <Timer_Init+0x194>
 31c:	85 e0       	ldi	r24, 0x05	; 5
 31e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0b c0       	rjmp	.+22     	; 0x33c <Timer_Init+0x194>
 326:	86 e0       	ldi	r24, 0x06	; 6
 328:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	06 c0       	rjmp	.+12     	; 0x33c <Timer_Init+0x194>
 330:	87 e0       	ldi	r24, 0x07	; 7
 332:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	01 c0       	rjmp	.+2      	; 0x33c <Timer_Init+0x194>
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	98 b7       	in	r25, 0x38	; 56
 33e:	97 7f       	andi	r25, 0xF7	; 247
 340:	98 bf       	out	0x38, r25	; 56
 342:	13 96       	adiw	r26, 0x03	; 3
 344:	9c 91       	ld	r25, X
 346:	99 23       	and	r25, r25
 348:	19 f0       	breq	.+6      	; 0x350 <Timer_Init+0x1a8>
 34a:	91 30       	cpi	r25, 0x01	; 1
 34c:	21 f0       	breq	.+8      	; 0x356 <Timer_Init+0x1ae>
 34e:	0f c0       	rjmp	.+30     	; 0x36e <Timer_Init+0x1c6>
 350:	99 b7       	in	r25, 0x39	; 57
 352:	99 bf       	out	0x39, r25	; 57
 354:	08 95       	ret
 356:	99 b7       	in	r25, 0x39	; 57
 358:	90 64       	ori	r25, 0x40	; 64
 35a:	99 bf       	out	0x39, r25	; 57
 35c:	08 95       	ret
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	08 95       	ret
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	08 95       	ret
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	08 95       	ret
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	08 95       	ret
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	08 95       	ret

00000372 <Timer_Start>:
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	89 f0       	breq	.+34     	; 0x398 <Timer_Start+0x26>
 376:	18 f0       	brcs	.+6      	; 0x37e <Timer_Start+0xc>
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	69 f1       	breq	.+90     	; 0x3d6 <Timer_Start+0x64>
 37c:	39 c0       	rjmp	.+114    	; 0x3f0 <Timer_Start+0x7e>
 37e:	61 30       	cpi	r22, 0x01	; 1
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	78 07       	cpc	r23, r24
 384:	b8 f5       	brcc	.+110    	; 0x3f4 <Timer_Start+0x82>
 386:	61 95       	neg	r22
 388:	62 bf       	out	0x32, r22	; 50
 38a:	93 b7       	in	r25, 0x33	; 51
 38c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <gu8_PreScaler_T0>
 390:	89 2b       	or	r24, r25
 392:	83 bf       	out	0x33, r24	; 51
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	08 95       	ret
 398:	86 2f       	mov	r24, r22
 39a:	81 95       	neg	r24
 39c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <au8_Temp_For_Low_Bit>
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	a1 e0       	ldi	r26, 0x01	; 1
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	86 1b       	sub	r24, r22
 3aa:	97 0b       	sbc	r25, r23
 3ac:	a1 09       	sbc	r26, r1
 3ae:	b1 09       	sbc	r27, r1
 3b0:	89 2f       	mov	r24, r25
 3b2:	9a 2f       	mov	r25, r26
 3b4:	ab 2f       	mov	r26, r27
 3b6:	bb 27       	eor	r27, r27
 3b8:	a7 fd       	sbrc	r26, 7
 3ba:	ba 95       	dec	r27
 3bc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <au8_Temp_For_Hight_Bit>
 3c0:	8d bd       	out	0x2d, r24	; 45
 3c2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <au8_Temp_For_Low_Bit>
 3c6:	8c bd       	out	0x2c, r24	; 44
 3c8:	9e b5       	in	r25, 0x2e	; 46
 3ca:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_PreScaler_T1>
 3ce:	89 2b       	or	r24, r25
 3d0:	8e bd       	out	0x2e, r24	; 46
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	08 95       	ret
 3d6:	61 30       	cpi	r22, 0x01	; 1
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	78 07       	cpc	r23, r24
 3dc:	68 f4       	brcc	.+26     	; 0x3f8 <Timer_Start+0x86>
 3de:	61 95       	neg	r22
 3e0:	64 bd       	out	0x24, r22	; 36
 3e2:	95 b5       	in	r25, 0x25	; 37
 3e4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gu8_PreScaler_T2>
 3e8:	89 2b       	or	r24, r25
 3ea:	85 bd       	out	0x25, r24	; 37
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	08 95       	ret
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	08 95       	ret
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	08 95       	ret

000003fc <Timer_Stop>:
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	49 f0       	breq	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 400:	18 f0       	brcs	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	59 f0       	breq	.+22     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 406:	0f c0       	rjmp	.+30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 408:	83 b7       	in	r24, 0x33	; 51
 40a:	88 7f       	andi	r24, 0xF8	; 248
 40c:	83 bf       	out	0x33, r24	; 51
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	08 95       	ret
 412:	8e b5       	in	r24, 0x2e	; 46
 414:	88 7f       	andi	r24, 0xF8	; 248
 416:	8e bd       	out	0x2e, r24	; 46
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	08 95       	ret
 41c:	85 b5       	in	r24, 0x25	; 37
 41e:	88 7f       	andi	r24, 0xF8	; 248
 420:	85 bd       	out	0x25, r24	; 37
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	08 95       	ret
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	08 95       	ret

0000042a <__vector_11>:

 

 Inturrept_Function (TIMER0_OVF_vect)
 {
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	8f 93       	push	r24
    ISR_Flag++;
 436:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 43a:	8f 5f       	subi	r24, 0xFF	; 255
 43c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	 TCNT0 = 6;
 440:	86 e0       	ldi	r24, 0x06	; 6
 442:	82 bf       	out	0x32, r24	; 50
 444:	8f 91       	pop	r24
 446:	0f 90       	pop	r0
 448:	0f be       	out	0x3f, r0	; 63
 44a:	0f 90       	pop	r0
 44c:	1f 90       	pop	r1
 44e:	18 95       	reti

00000450 <TMU_Init>:
	}



	ERROR_STATUS TMU_Init (const str_TMU_InitConfig_t * pstr_ConfigPtr )
	{
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	00 d0       	rcall	.+0      	; 0x456 <TMU_Init+0x6>
 456:	00 d0       	rcall	.+0      	; 0x458 <TMU_Init+0x8>
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
		uint8_t u8_Ret_Status = E_OK;
		if (pstr_ConfigPtr!= NULL)
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	a1 f0       	breq	.+40     	; 0x488 <TMU_Init+0x38>
		{
			if (str_FuncStatus.u8_Init_Flag ==NOT_INITIALIZED)
 460:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <str_FuncStatus>
 464:	21 11       	cpse	r18, r1
 466:	12 c0       	rjmp	.+36     	; 0x48c <TMU_Init+0x3c>
 468:	fc 01       	movw	r30, r24
			{
				/* set TMU status, already initialized */
				str_FuncStatus.u8_Init_Flag= INITIALIZED;
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <str_FuncStatus>

				/*Timer Configurations*/
				Timer_Cfg_ST str_TimerCfg;
				str_TimerCfg.Timer_Ch = (pstr_ConfigPtr->u8_Timer_Id);
 470:	80 81       	ld	r24, Z
 472:	89 83       	std	Y+1, r24	; 0x01
				str_TimerCfg.Timer_Mode = TIMER_MODE;
 474:	2a 83       	std	Y+2, r18	; 0x02
				str_TimerCfg.Timer_PreScaler = PRESCALER_64;
 476:	84 e0       	ldi	r24, 0x04	; 4
 478:	8b 83       	std	Y+3, r24	; 0x03
				str_TimerCfg.Timer_Interrupt_Mode = TIMER_MODE_INTERRUPT;
 47a:	2c 83       	std	Y+4, r18	; 0x04
				Timer_Init(&str_TimerCfg);
 47c:	ce 01       	movw	r24, r28
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Timer_Init>



	ERROR_STATUS TMU_Init (const str_TMU_InitConfig_t * pstr_ConfigPtr )
	{
		uint8_t u8_Ret_Status = E_OK;
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	03 c0       	rjmp	.+6      	; 0x48e <TMU_Init+0x3e>
			
			
		}
		else
		{
			u8_Ret_Status =E_NOK;
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	01 c0       	rjmp	.+2      	; 0x48e <TMU_Init+0x3e>
				Timer_Init(&str_TimerCfg);
				
			}
			else
			{
				u8_Ret_Status =E_NOK;
 48c:	81 e0       	ldi	r24, 0x01	; 1
		{
			u8_Ret_Status =E_NOK;
		}
		return u8_Ret_Status;
		
	}
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <TMU_Dispatch>:

	ERROR_STATUS TMU_Dispatch(void)
	{
 49c:	df 92       	push	r13
 49e:	ef 92       	push	r14
 4a0:	ff 92       	push	r15
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
		uint8_t u8_Buffer_Index=0;
		static uint8_t u8_Flag=0;
		
		for (u8_Buffer_Index=0;u8_Buffer_Index<TMU_BUFFER_SIZE && u8_Flag<gu8_Buffer_Counter;u8_Buffer_Index++)
 4aa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Buffer_Counter>
 4ae:	88 23       	and	r24, r24
 4b0:	39 f1       	breq	.+78     	; 0x500 <TMU_Dispatch+0x64>
 4b2:	ce e6       	ldi	r28, 0x6E	; 110
 4b4:	d0 e0       	ldi	r29, 0x00	; 0
 4b6:	0e e7       	ldi	r16, 0x7E	; 126
 4b8:	10 e0       	ldi	r17, 0x00	; 0
					
					arrstr_TMU_Buffer[u8_Buffer_Index].Ptr_Consumer();
					arrstr_TMU_Buffer[u8_Buffer_Index].u8_Pre_Flag = ISR_Flag;
					if (ISR_Flag == 61)
					{
						ISR_Flag = 1;
 4ba:	dd 24       	eor	r13, r13
 4bc:	d3 94       	inc	r13
		uint8_t u8_Buffer_Index=0;
		static uint8_t u8_Flag=0;
		
		for (u8_Buffer_Index=0;u8_Buffer_Index<TMU_BUFFER_SIZE && u8_Flag<gu8_Buffer_Counter;u8_Buffer_Index++)
		{
			if(arrstr_TMU_Buffer[u8_Buffer_Index].u8_Duty == USED)
 4be:	88 81       	ld	r24, Y
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	b1 f4       	brne	.+44     	; 0x4f0 <TMU_Dispatch+0x54>
			{
				
				if ((ISR_Flag != arrstr_TMU_Buffer[u8_Buffer_Index].u8_Pre_Flag) && ((ISR_Flag % (arrstr_TMU_Buffer[u8_Buffer_Index].u8_Delay_Time)) == 0))
 4c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4c8:	9e 81       	ldd	r25, Y+6	; 0x06
 4ca:	98 17       	cp	r25, r24
 4cc:	89 f0       	breq	.+34     	; 0x4f0 <TMU_Dispatch+0x54>
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	69 81       	ldd	r22, Y+1	; 0x01
 4d2:	7a 81       	ldd	r23, Y+2	; 0x02
 4d4:	0e 94 06 03 	call	0x60c	; 0x60c <__udivmodhi4>
 4d8:	89 2b       	or	r24, r25
 4da:	51 f4       	brne	.+20     	; 0x4f0 <TMU_Dispatch+0x54>
				{
					
					arrstr_TMU_Buffer[u8_Buffer_Index].Ptr_Consumer();
 4dc:	ec 81       	ldd	r30, Y+4	; 0x04
 4de:	fd 81       	ldd	r31, Y+5	; 0x05
 4e0:	09 95       	icall
					arrstr_TMU_Buffer[u8_Buffer_Index].u8_Pre_Flag = ISR_Flag;
 4e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4e6:	8e 83       	std	Y+6, r24	; 0x06
					if (ISR_Flag == 61)
 4e8:	8d 33       	cpi	r24, 0x3D	; 61
 4ea:	11 f4       	brne	.+4      	; 0x4f0 <TMU_Dispatch+0x54>
					{
						ISR_Flag = 1;
 4ec:	d0 92 60 00 	sts	0x0060, r13	; 0x800060 <__DATA_REGION_ORIGIN__>
	ERROR_STATUS TMU_Dispatch(void)
	{
		uint8_t u8_Buffer_Index=0;
		static uint8_t u8_Flag=0;
		
		for (u8_Buffer_Index=0;u8_Buffer_Index<TMU_BUFFER_SIZE && u8_Flag<gu8_Buffer_Counter;u8_Buffer_Index++)
 4f0:	c0 17       	cp	r28, r16
 4f2:	d1 07       	cpc	r29, r17
 4f4:	29 f0       	breq	.+10     	; 0x500 <TMU_Dispatch+0x64>
 4f6:	28 96       	adiw	r28, 0x08	; 8
 4f8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Buffer_Counter>
 4fc:	81 11       	cpse	r24, r1
 4fe:	df cf       	rjmp	.-66     	; 0x4be <TMU_Dispatch+0x22>
					
				}
			}
		}
		
	}
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	0f 91       	pop	r16
 508:	ff 90       	pop	r15
 50a:	ef 90       	pop	r14
 50c:	df 90       	pop	r13
 50e:	08 95       	ret

00000510 <TMU_Stop>:
	
	ERROR_STATUS TMU_Stop(uint8_t Task_Id, void(* Ptr_Func)(void))
	{
 510:	cf 93       	push	r28
 512:	df 93       	push	r29


	static ERROR_STATUS Is_Buffer_Empty(void)
	{
		uint8_t u8_Ret_Status = FALSE;
		if (gu8_Buffer_Counter == 0)
 514:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <gu8_Buffer_Counter>
	
	ERROR_STATUS TMU_Stop(uint8_t Task_Id, void(* Ptr_Func)(void))
	{
		uint8_t au8_Search_Loop_Counter = ZERO;
		
		if (FALSE == Is_Buffer_Empty())
 518:	44 23       	and	r20, r20
 51a:	51 f1       	breq	.+84     	; 0x570 <TMU_Stop+0x60>
 51c:	ee e6       	ldi	r30, 0x6E	; 110
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	30 e0       	ldi	r19, 0x00	; 0
		   /* Search for about given task*/
		   for (au8_Search_Loop_Counter = ZERO; au8_Search_Loop_Counter < TMU_BUFFER_SIZE; au8_Search_Loop_Counter ++)
		   {
			   
			   /*Check if this task is the desired to stop*/
			   if ((Task_Id == arrstr_TMU_Buffer[au8_Search_Loop_Counter].u8_Task_ID) && (Ptr_Func == arrstr_TMU_Buffer[au8_Search_Loop_Counter].Ptr_Consumer))
 524:	d9 01       	movw	r26, r18
 526:	97 81       	ldd	r25, Z+7	; 0x07
 528:	98 13       	cpse	r25, r24
 52a:	18 c0       	rjmp	.+48     	; 0x55c <TMU_Stop+0x4c>
 52c:	c4 81       	ldd	r28, Z+4	; 0x04
 52e:	d5 81       	ldd	r29, Z+5	; 0x05
 530:	c6 17       	cp	r28, r22
 532:	d7 07       	cpc	r29, r23
 534:	99 f4       	brne	.+38     	; 0x55c <TMU_Stop+0x4c>
			   {
				   /*stop the task*/
					arrstr_TMU_Buffer[au8_Search_Loop_Counter].u8_Duty = NOT_USED;
 536:	aa 0f       	add	r26, r26
 538:	bb 1f       	adc	r27, r27
 53a:	aa 0f       	add	r26, r26
 53c:	bb 1f       	adc	r27, r27
 53e:	aa 0f       	add	r26, r26
 540:	bb 1f       	adc	r27, r27
 542:	a2 59       	subi	r26, 0x92	; 146
 544:	bf 4f       	sbci	r27, 0xFF	; 255
 546:	1c 92       	st	X, r1
					arrstr_TMU_Buffer[au8_Search_Loop_Counter].Ptr_Consumer = NULL;
 548:	15 96       	adiw	r26, 0x05	; 5
 54a:	1c 92       	st	X, r1
 54c:	1e 92       	st	-X, r1
 54e:	14 97       	sbiw	r26, 0x04	; 4
					/*decrease the buffer*/
					gu8_Buffer_Counter --;
 550:	41 50       	subi	r20, 0x01	; 1
 552:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <gu8_Buffer_Counter>
				   break;
			   }
		   }
			/*if the buffer empty after this decrease stop the timer to stop receiving timer interrupt */
			if (TRUE == Is_Buffer_Empty())
 556:	44 23       	and	r20, r20
 558:	41 f0       	breq	.+16     	; 0x56a <TMU_Stop+0x5a>
 55a:	0a c0       	rjmp	.+20     	; 0x570 <TMU_Stop+0x60>
 55c:	2f 5f       	subi	r18, 0xFF	; 255
 55e:	3f 4f       	sbci	r19, 0xFF	; 255
 560:	38 96       	adiw	r30, 0x08	; 8
		uint8_t au8_Search_Loop_Counter = ZERO;
		
		if (FALSE == Is_Buffer_Empty())
		{
		   /* Search for about given task*/
		   for (au8_Search_Loop_Counter = ZERO; au8_Search_Loop_Counter < TMU_BUFFER_SIZE; au8_Search_Loop_Counter ++)
 562:	23 30       	cpi	r18, 0x03	; 3
 564:	31 05       	cpc	r19, r1
 566:	f1 f6       	brne	.-68     	; 0x524 <TMU_Stop+0x14>
 568:	03 c0       	rjmp	.+6      	; 0x570 <TMU_Stop+0x60>
				   break;
			   }
		   }
			/*if the buffer empty after this decrease stop the timer to stop receiving timer interrupt */
			if (TRUE == Is_Buffer_Empty())
					Timer_Stop(Timer_0);
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Timer_Stop>
		
		

		
		
	}
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <TMU_Start>:




  ERROR_STATUS TMU_Start (uint16_t Time_Delay,uint8_t Task_Id, uint8_t Repeat, void(* Ptr_Func)(void))
  {
 576:	ef 92       	push	r14
 578:	ff 92       	push	r15
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	7c 01       	movw	r14, r24
     /*variable for linear search algorithm*/
	  uint8_t au8_Search_Loop_Counter = ZERO;
	  sint8_t aS8_Empty_Buffer_Location = EMPTY_BUFFER_LOCATION_INITIAL_VALUE;
	  uint8_t au8_Already_Started = NOT_INITIALIZED;

	  if (INITIALIZED == str_FuncStatus.u8_Init_Flag)
 584:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <str_FuncStatus>
 588:	91 30       	cpi	r25, 0x01	; 1
 58a:	c1 f5       	brne	.+112    	; 0x5fc <TMU_Start+0x86>
	}

	static ERROR_STATUS Is_Buffer_Full(void)
	{
		uint8_t u8_Ret_Status = FALSE;
		if (gu8_Buffer_Counter == TMU_BUFFER_SIZE)
 58c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Buffer_Counter>
	  sint8_t aS8_Empty_Buffer_Location = EMPTY_BUFFER_LOCATION_INITIAL_VALUE;
	  uint8_t au8_Already_Started = NOT_INITIALIZED;

	  if (INITIALIZED == str_FuncStatus.u8_Init_Flag)
	  {
	     if (FALSE == Is_Buffer_Full())
 590:	83 30       	cpi	r24, 0x03	; 3
 592:	a1 f1       	breq	.+104    	; 0x5fc <TMU_Start+0x86>
		  {
		      if (NULL != Ptr_Func)
 594:	21 15       	cp	r18, r1
 596:	31 05       	cpc	r19, r1
 598:	89 f1       	breq	.+98     	; 0x5fc <TMU_Start+0x86>
 59a:	ae e6       	ldi	r26, 0x6E	; 110
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	e0 e0       	ldi	r30, 0x00	; 0
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	ed 01       	movw	r28, r26
			      
			      /* Search for empty location and if the consumer is already started in the TMU buffer*/
			      for (au8_Search_Loop_Counter = ZERO; au8_Search_Loop_Counter < TMU_BUFFER_SIZE; au8_Search_Loop_Counter ++)
			      {
				      /* save the first empty location in TMU buffer*/
				      if ((NOT_USED == arrstr_TMU_Buffer[au8_Search_Loop_Counter].u8_Duty) && (aS8_Empty_Buffer_Location == EMPTY_BUFFER_LOCATION_INITIAL_VALUE))
 5a4:	5c 91       	ld	r21, X
 5a6:	51 11       	cpse	r21, r1
 5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <TMU_Start+0x3a>
 5aa:	e1 11       	cpse	r30, r1
 5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <TMU_Start+0x3a>
				      {
					      aS8_Empty_Buffer_Location = au8_Search_Loop_Counter;
 5ae:	e9 2f       	mov	r30, r25
				      }
				      /*Check if the consumer is pre started with the same ID*/
				      if ((Task_Id == arrstr_TMU_Buffer[au8_Search_Loop_Counter].u8_Task_ID) && (Ptr_Func == arrstr_TMU_Buffer[au8_Search_Loop_Counter].Ptr_Consumer))
 5b0:	5f 81       	ldd	r21, Y+7	; 0x07
 5b2:	56 13       	cpse	r21, r22
 5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <TMU_Start+0x4a>
 5b6:	0c 81       	ldd	r16, Y+4	; 0x04
 5b8:	1d 81       	ldd	r17, Y+5	; 0x05
 5ba:	20 17       	cp	r18, r16
 5bc:	31 07       	cpc	r19, r17
 5be:	29 f0       	breq	.+10     	; 0x5ca <TMU_Start+0x54>
		  {
		      if (NULL != Ptr_Func)
		      {
			      
			      /* Search for empty location and if the consumer is already started in the TMU buffer*/
			      for (au8_Search_Loop_Counter = ZERO; au8_Search_Loop_Counter < TMU_BUFFER_SIZE; au8_Search_Loop_Counter ++)
 5c0:	9f 5f       	subi	r25, 0xFF	; 255
 5c2:	18 96       	adiw	r26, 0x08	; 8
 5c4:	93 30       	cpi	r25, 0x03	; 3
 5c6:	69 f7       	brne	.-38     	; 0x5a2 <TMU_Start+0x2c>
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <TMU_Start+0x58>
			      }
					//else for restart same task
			      else if (au8_Already_Started == INITIALIZED)
			      {
				      aS8_Empty_Buffer_Location = EMPTY_BUFFER_LOCATION_INITIAL_VALUE;
				      SET_BIT(PORTA_DATA,BIT6);
 5ca:	de 9a       	sbi	0x1b, 6	; 27
 5cc:	17 c0       	rjmp	.+46     	; 0x5fc <TMU_Start+0x86>
				      str_Buffer.Ptr_Consumer =  Ptr_Func;
				      str_Buffer.u8_Pre_Flag = 1;
				      str_Buffer.u8_Task_ID = Task_Id;
				      
				      /*Insert the created struct for the new creator in the TMU buffer*/
				      arrstr_TMU_Buffer[aS8_Empty_Buffer_Location] = str_Buffer;
 5ce:	98 e0       	ldi	r25, 0x08	; 8
 5d0:	e9 02       	muls	r30, r25
 5d2:	f0 01       	movw	r30, r0
 5d4:	11 24       	eor	r1, r1
 5d6:	e2 59       	subi	r30, 0x92	; 146
 5d8:	ff 4f       	sbci	r31, 0xFF	; 255
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	90 83       	st	Z, r25
 5de:	f2 82       	std	Z+2, r15	; 0x02
 5e0:	e1 82       	std	Z+1, r14	; 0x01
 5e2:	43 83       	std	Z+3, r20	; 0x03
 5e4:	35 83       	std	Z+5, r19	; 0x05
 5e6:	24 83       	std	Z+4, r18	; 0x04
 5e8:	96 83       	std	Z+6, r25	; 0x06
 5ea:	67 83       	std	Z+7, r22	; 0x07
				      gu8_Buffer_Counter++;
 5ec:	8f 5f       	subi	r24, 0xFF	; 255
 5ee:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gu8_Buffer_Counter>
				      Timer_Start(Timer_0,250);
 5f2:	6a ef       	ldi	r22, 0xFA	; 250
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	0e 94 b9 01 	call	0x372	; 0x372 <Timer_Start>
	  //else for no TMU init
	  else ;
	  //return error
	  
	  
  }
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	1f 91       	pop	r17
 604:	0f 91       	pop	r16
 606:	ff 90       	pop	r15
 608:	ef 90       	pop	r14
 60a:	08 95       	ret

0000060c <__udivmodhi4>:
 60c:	aa 1b       	sub	r26, r26
 60e:	bb 1b       	sub	r27, r27
 610:	51 e1       	ldi	r21, 0x11	; 17
 612:	07 c0       	rjmp	.+14     	; 0x622 <__udivmodhi4_ep>

00000614 <__udivmodhi4_loop>:
 614:	aa 1f       	adc	r26, r26
 616:	bb 1f       	adc	r27, r27
 618:	a6 17       	cp	r26, r22
 61a:	b7 07       	cpc	r27, r23
 61c:	10 f0       	brcs	.+4      	; 0x622 <__udivmodhi4_ep>
 61e:	a6 1b       	sub	r26, r22
 620:	b7 0b       	sbc	r27, r23

00000622 <__udivmodhi4_ep>:
 622:	88 1f       	adc	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	5a 95       	dec	r21
 628:	a9 f7       	brne	.-22     	; 0x614 <__udivmodhi4_loop>
 62a:	80 95       	com	r24
 62c:	90 95       	com	r25
 62e:	bc 01       	movw	r22, r24
 630:	cd 01       	movw	r24, r26
 632:	08 95       	ret

00000634 <__tablejump2__>:
 634:	ee 0f       	add	r30, r30
 636:	ff 1f       	adc	r31, r31
 638:	05 90       	lpm	r0, Z+
 63a:	f4 91       	lpm	r31, Z
 63c:	e0 2d       	mov	r30, r0
 63e:	09 94       	ijmp

00000640 <_exit>:
 640:	f8 94       	cli

00000642 <__stop_program>:
 642:	ff cf       	rjmp	.-2      	; 0x642 <__stop_program>
