
Dynamic Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000074e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800060  00800060  0000074e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001174  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad9  00000000  00000000  00002333  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cb  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a83  00000000  00000000  000036cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000414e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_11>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	78 01       	movw	r14, r16
  56:	7d 01       	movw	r14, r26
  58:	82 01       	movw	r16, r4
  5a:	87 01       	movw	r16, r14
  5c:	8c 01       	movw	r16, r24
  5e:	91 01       	movw	r18, r2
  60:	96 01       	movw	r18, r12

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_clear_bss>:
  6e:	20 e0       	ldi	r18, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	01 c0       	rjmp	.+2      	; 0x78 <.do_clear_bss_start>

00000076 <.do_clear_bss_loop>:
  76:	1d 92       	st	X+, r1

00000078 <.do_clear_bss_start>:
  78:	aa 38       	cpi	r26, 0x8A	; 138
  7a:	b2 07       	cpc	r27, r18
  7c:	e1 f7       	brne	.-8      	; 0x76 <.do_clear_bss_loop>
  7e:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  82:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <t2>:
		TMU_Stop(1,t1);
	}
}
void t2 (void)
{
   TOGGLE_BIT(PORTA_DATA,BIT1);
  8a:	9b b3       	in	r25, 0x1b	; 27
  8c:	82 e0       	ldi	r24, 0x02	; 2
  8e:	89 27       	eor	r24, r25
  90:	8b bb       	out	0x1b, r24	; 27
  92:	08 95       	ret

00000094 <t3>:
}
void t3 (void)
{
	TOGGLE_BIT(PORTA_DATA,BIT2);
  94:	9b b3       	in	r25, 0x1b	; 27
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	89 27       	eor	r24, r25
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	08 95       	ret

0000009e <t4>:
}
void t4 (void)
{
	TOGGLE_BIT(PORTA_DATA,BIT3);
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	89 27       	eor	r24, r25
  a4:	8b bb       	out	0x1b, r24	; 27
  a6:	08 95       	ret

000000a8 <t1>:
    }
}

void t1 (void)
{
   TOGGLE_BIT(PORTA_DATA,BIT0);
  a8:	9b b3       	in	r25, 0x1b	; 27
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	89 27       	eor	r24, r25
  ae:	8b bb       	out	0x1b, r24	; 27
	c++;
  b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (c == 100)
  c2:	84 36       	cpi	r24, 0x64	; 100
  c4:	91 05       	cpc	r25, r1
  c6:	29 f4       	brne	.+10     	; 0xd2 <t1+0x2a>
	{
	   TMU_Stop(1,t2);
  c8:	65 e4       	ldi	r22, 0x45	; 69
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TMU_Stop>
	}
	if (c == 200)
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  da:	88 3c       	cpi	r24, 0xC8	; 200
  dc:	91 05       	cpc	r25, r1
  de:	29 f4       	brne	.+10     	; 0xea <t1+0x42>
	{
		TMU_Stop(3,t3);
  e0:	6a e4       	ldi	r22, 0x4A	; 74
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TMU_Stop>
	}
	if (c == 500)
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	84 3f       	cpi	r24, 0xF4	; 244
  f4:	91 40       	sbci	r25, 0x01	; 1
  f6:	41 f4       	brne	.+16     	; 0x108 <t1+0x60>
	{
		TMU_Start(6,1,0,t2);
  f8:	25 e4       	ldi	r18, 0x45	; 69
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 04 03 	call	0x608	; 0x608 <TMU_Start>
	}
	if (c == 800)
 108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 110:	80 32       	cpi	r24, 0x20	; 32
 112:	93 40       	sbci	r25, 0x03	; 3
 114:	29 f4       	brne	.+10     	; 0x120 <t1+0x78>
	{
		TMU_Stop(1,t2);
 116:	65 e4       	ldi	r22, 0x45	; 69
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TMU_Stop>
	}

	if (c == 1000)
 120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 124:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 128:	88 3e       	cpi	r24, 0xE8	; 232
 12a:	93 40       	sbci	r25, 0x03	; 3
 12c:	29 f4       	brne	.+10     	; 0x138 <t1+0x90>
	{
		TMU_Stop(1,t1);
 12e:	64 e5       	ldi	r22, 0x54	; 84
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TMU_Stop>
 138:	08 95       	ret

0000013a <main>:

extern str_TMU_InitConfig_t init;
int main(void)
{
    
	 SET_BIT(PORTA_DIR,BIT0);
 13a:	d0 9a       	sbi	0x1a, 0	; 26
	 SET_BIT(PORTA_DIR,BIT1);
 13c:	d1 9a       	sbi	0x1a, 1	; 26
	 SET_BIT(PORTA_DIR,BIT2);
 13e:	d2 9a       	sbi	0x1a, 2	; 26
	 SET_BIT(PORTA_DIR,BIT3);
 140:	d3 9a       	sbi	0x1a, 3	; 26
	 SET_BIT(PORTA_DIR,BIT6);
 142:	d6 9a       	sbi	0x1a, 6	; 26

	 TMU_Init(&init);
 144:	88 e8       	ldi	r24, 0x88	; 136
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 66 02 	call	0x4cc	; 0x4cc <TMU_Init>
	 
	 TMU_Start(10,1,0,t1);
 14c:	24 e5       	ldi	r18, 0x54	; 84
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	8a e0       	ldi	r24, 0x0A	; 10
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 04 03 	call	0x608	; 0x608 <TMU_Start>
	 TMU_Start(3,1,0,t2);
 15c:	25 e4       	ldi	r18, 0x45	; 69
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 04 03 	call	0x608	; 0x608 <TMU_Start>
	 TMU_Start(4,3,0,t3);
 16c:	2a e4       	ldi	r18, 0x4A	; 74
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	63 e0       	ldi	r22, 0x03	; 3
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 04 03 	call	0x608	; 0x608 <TMU_Start>
	 TMU_Start(5,4,0,t4);
 17c:	2f e4       	ldi	r18, 0x4F	; 79
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	64 e0       	ldi	r22, 0x04	; 4
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 04 03 	call	0x608	; 0x608 <TMU_Start>
	 
	 /* Replace with your application code */
    while (1) 
    {
	    TMU_Dispatch();
 18c:	0e 94 9c 02 	call	0x538	; 0x538 <TMU_Dispatch>
 190:	fd cf       	rjmp	.-6      	; 0x18c <main+0x52>

00000192 <Timer_Init>:
	    Error |= E_NOK;
	    break;
    }

	 return Error;
 }
 192:	dc 01       	movw	r26, r24
 194:	89 2b       	or	r24, r25
 196:	09 f4       	brne	.+2      	; 0x19a <Timer_Init+0x8>
 198:	e0 c0       	rjmp	.+448    	; 0x35a <Timer_Init+0x1c8>
 19a:	8c 91       	ld	r24, X
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	09 f4       	brne	.+2      	; 0x1a2 <Timer_Init+0x10>
 1a0:	4e c0       	rjmp	.+156    	; 0x23e <Timer_Init+0xac>
 1a2:	20 f0       	brcs	.+8      	; 0x1ac <Timer_Init+0x1a>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	09 f4       	brne	.+2      	; 0x1aa <Timer_Init+0x18>
 1a8:	90 c0       	rjmp	.+288    	; 0x2ca <Timer_Init+0x138>
 1aa:	d9 c0       	rjmp	.+434    	; 0x35e <Timer_Init+0x1cc>
 1ac:	13 be       	out	0x33, r1	; 51
 1ae:	83 b7       	in	r24, 0x33	; 51
 1b0:	83 bf       	out	0x33, r24	; 51
 1b2:	83 b7       	in	r24, 0x33	; 51
 1b4:	83 bf       	out	0x33, r24	; 51
 1b6:	12 96       	adiw	r26, 0x02	; 2
 1b8:	8c 91       	ld	r24, X
 1ba:	12 97       	sbiw	r26, 0x02	; 2
 1bc:	84 30       	cpi	r24, 0x04	; 4
 1be:	a9 f0       	breq	.+42     	; 0x1ea <Timer_Init+0x58>
 1c0:	28 f4       	brcc	.+10     	; 0x1cc <Timer_Init+0x3a>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	41 f0       	breq	.+16     	; 0x1d6 <Timer_Init+0x44>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	59 f0       	breq	.+22     	; 0x1e0 <Timer_Init+0x4e>
 1ca:	1e c0       	rjmp	.+60     	; 0x208 <Timer_Init+0x76>
 1cc:	86 30       	cpi	r24, 0x06	; 6
 1ce:	91 f0       	breq	.+36     	; 0x1f4 <Timer_Init+0x62>
 1d0:	87 30       	cpi	r24, 0x07	; 7
 1d2:	a9 f0       	breq	.+42     	; 0x1fe <Timer_Init+0x6c>
 1d4:	19 c0       	rjmp	.+50     	; 0x208 <Timer_Init+0x76>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_PreScaler_T0>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	15 c0       	rjmp	.+42     	; 0x20a <Timer_Init+0x78>
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_PreScaler_T0>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	10 c0       	rjmp	.+32     	; 0x20a <Timer_Init+0x78>
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_PreScaler_T0>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0b c0       	rjmp	.+22     	; 0x20a <Timer_Init+0x78>
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_PreScaler_T0>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <Timer_Init+0x78>
 1fe:	85 e0       	ldi	r24, 0x05	; 5
 200:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_PreScaler_T0>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	01 c0       	rjmp	.+2      	; 0x20a <Timer_Init+0x78>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	13 96       	adiw	r26, 0x03	; 3
 20c:	9c 91       	ld	r25, X
 20e:	13 97       	sbiw	r26, 0x03	; 3
 210:	99 23       	and	r25, r25
 212:	19 f0       	breq	.+6      	; 0x21a <Timer_Init+0x88>
 214:	91 30       	cpi	r25, 0x01	; 1
 216:	21 f0       	breq	.+8      	; 0x220 <Timer_Init+0x8e>
 218:	a4 c0       	rjmp	.+328    	; 0x362 <Timer_Init+0x1d0>
 21a:	99 b7       	in	r25, 0x39	; 57
 21c:	99 bf       	out	0x39, r25	; 57
 21e:	08 95       	ret
 220:	14 96       	adiw	r26, 0x04	; 4
 222:	2d 91       	ld	r18, X+
 224:	3c 91       	ld	r19, X
 226:	15 97       	sbiw	r26, 0x05	; 5
 228:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <ptr_CBF+0x1>
 22c:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <ptr_CBF>
 230:	99 b7       	in	r25, 0x39	; 57
 232:	91 60       	ori	r25, 0x01	; 1
 234:	99 bf       	out	0x39, r25	; 57
 236:	9f b7       	in	r25, 0x3f	; 63
 238:	90 68       	ori	r25, 0x80	; 128
 23a:	9f bf       	out	0x3f, r25	; 63
 23c:	08 95       	ret
 23e:	1f bc       	out	0x2f, r1	; 47
 240:	1e bc       	out	0x2e, r1	; 46
 242:	8f b5       	in	r24, 0x2f	; 47
 244:	8c 7f       	andi	r24, 0xFC	; 252
 246:	8f bd       	out	0x2f, r24	; 47
 248:	8e b5       	in	r24, 0x2e	; 46
 24a:	87 7e       	andi	r24, 0xE7	; 231
 24c:	8e bd       	out	0x2e, r24	; 46
 24e:	8f b5       	in	r24, 0x2f	; 47
 250:	8f 70       	andi	r24, 0x0F	; 15
 252:	8f bd       	out	0x2f, r24	; 47
 254:	12 96       	adiw	r26, 0x02	; 2
 256:	8c 91       	ld	r24, X
 258:	12 97       	sbiw	r26, 0x02	; 2
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	a9 f0       	breq	.+42     	; 0x288 <Timer_Init+0xf6>
 25e:	28 f4       	brcc	.+10     	; 0x26a <Timer_Init+0xd8>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	41 f0       	breq	.+16     	; 0x274 <Timer_Init+0xe2>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	59 f0       	breq	.+22     	; 0x27e <Timer_Init+0xec>
 268:	1e c0       	rjmp	.+60     	; 0x2a6 <Timer_Init+0x114>
 26a:	86 30       	cpi	r24, 0x06	; 6
 26c:	91 f0       	breq	.+36     	; 0x292 <Timer_Init+0x100>
 26e:	87 30       	cpi	r24, 0x07	; 7
 270:	a9 f0       	breq	.+42     	; 0x29c <Timer_Init+0x10a>
 272:	19 c0       	rjmp	.+50     	; 0x2a6 <Timer_Init+0x114>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_PreScaler_T1>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	15 c0       	rjmp	.+42     	; 0x2a8 <Timer_Init+0x116>
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_PreScaler_T1>
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	10 c0       	rjmp	.+32     	; 0x2a8 <Timer_Init+0x116>
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_PreScaler_T1>
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0b c0       	rjmp	.+22     	; 0x2a8 <Timer_Init+0x116>
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_PreScaler_T1>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <Timer_Init+0x116>
 29c:	85 e0       	ldi	r24, 0x05	; 5
 29e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_PreScaler_T1>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <Timer_Init+0x116>
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	99 b7       	in	r25, 0x39	; 57
 2aa:	93 7c       	andi	r25, 0xC3	; 195
 2ac:	99 bf       	out	0x39, r25	; 57
 2ae:	13 96       	adiw	r26, 0x03	; 3
 2b0:	9c 91       	ld	r25, X
 2b2:	99 23       	and	r25, r25
 2b4:	19 f0       	breq	.+6      	; 0x2bc <Timer_Init+0x12a>
 2b6:	91 30       	cpi	r25, 0x01	; 1
 2b8:	21 f0       	breq	.+8      	; 0x2c2 <Timer_Init+0x130>
 2ba:	55 c0       	rjmp	.+170    	; 0x366 <Timer_Init+0x1d4>
 2bc:	99 b7       	in	r25, 0x39	; 57
 2be:	99 bf       	out	0x39, r25	; 57
 2c0:	08 95       	ret
 2c2:	99 b7       	in	r25, 0x39	; 57
 2c4:	94 60       	ori	r25, 0x04	; 4
 2c6:	99 bf       	out	0x39, r25	; 57
 2c8:	08 95       	ret
 2ca:	15 bc       	out	0x25, r1	; 37
 2cc:	85 b5       	in	r24, 0x25	; 37
 2ce:	85 bd       	out	0x25, r24	; 37
 2d0:	85 b5       	in	r24, 0x25	; 37
 2d2:	85 bd       	out	0x25, r24	; 37
 2d4:	12 96       	adiw	r26, 0x02	; 2
 2d6:	ec 91       	ld	r30, X
 2d8:	12 97       	sbiw	r26, 0x02	; 2
 2da:	4e 2f       	mov	r20, r30
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	fa 01       	movw	r30, r20
 2e0:	31 97       	sbiw	r30, 0x01	; 1
 2e2:	e7 30       	cpi	r30, 0x07	; 7
 2e4:	f1 05       	cpc	r31, r1
 2e6:	38 f5       	brcc	.+78     	; 0x336 <Timer_Init+0x1a4>
 2e8:	e6 5d       	subi	r30, 0xD6	; 214
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__tablejump2__>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	1f c0       	rjmp	.+62     	; 0x338 <Timer_Init+0x1a6>
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	1a c0       	rjmp	.+52     	; 0x338 <Timer_Init+0x1a6>
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	15 c0       	rjmp	.+42     	; 0x338 <Timer_Init+0x1a6>
 30e:	84 e0       	ldi	r24, 0x04	; 4
 310:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	10 c0       	rjmp	.+32     	; 0x338 <Timer_Init+0x1a6>
 318:	85 e0       	ldi	r24, 0x05	; 5
 31a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0b c0       	rjmp	.+22     	; 0x338 <Timer_Init+0x1a6>
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	06 c0       	rjmp	.+12     	; 0x338 <Timer_Init+0x1a6>
 32c:	87 e0       	ldi	r24, 0x07	; 7
 32e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_PreScaler_T2>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	01 c0       	rjmp	.+2      	; 0x338 <Timer_Init+0x1a6>
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	98 b7       	in	r25, 0x38	; 56
 33a:	97 7f       	andi	r25, 0xF7	; 247
 33c:	98 bf       	out	0x38, r25	; 56
 33e:	13 96       	adiw	r26, 0x03	; 3
 340:	9c 91       	ld	r25, X
 342:	99 23       	and	r25, r25
 344:	19 f0       	breq	.+6      	; 0x34c <Timer_Init+0x1ba>
 346:	91 30       	cpi	r25, 0x01	; 1
 348:	21 f0       	breq	.+8      	; 0x352 <Timer_Init+0x1c0>
 34a:	0f c0       	rjmp	.+30     	; 0x36a <Timer_Init+0x1d8>
 34c:	99 b7       	in	r25, 0x39	; 57
 34e:	99 bf       	out	0x39, r25	; 57
 350:	08 95       	ret
 352:	99 b7       	in	r25, 0x39	; 57
 354:	90 64       	ori	r25, 0x40	; 64
 356:	99 bf       	out	0x39, r25	; 57
 358:	08 95       	ret
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	08 95       	ret
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	08 95       	ret
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	08 95       	ret
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	08 95       	ret
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	08 95       	ret

0000036e <Timer_Start>:
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	89 f0       	breq	.+34     	; 0x394 <Timer_Start+0x26>
 372:	18 f0       	brcs	.+6      	; 0x37a <Timer_Start+0xc>
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	69 f1       	breq	.+90     	; 0x3d2 <Timer_Start+0x64>
 378:	39 c0       	rjmp	.+114    	; 0x3ec <Timer_Start+0x7e>
 37a:	61 30       	cpi	r22, 0x01	; 1
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	78 07       	cpc	r23, r24
 380:	b8 f5       	brcc	.+110    	; 0x3f0 <Timer_Start+0x82>
 382:	61 95       	neg	r22
 384:	62 bf       	out	0x32, r22	; 50
 386:	93 b7       	in	r25, 0x33	; 51
 388:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <gu8_PreScaler_T0>
 38c:	89 2b       	or	r24, r25
 38e:	83 bf       	out	0x33, r24	; 51
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret
 394:	86 2f       	mov	r24, r22
 396:	81 95       	neg	r24
 398:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <au8_Temp_For_Low_Bit>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	a1 e0       	ldi	r26, 0x01	; 1
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	86 1b       	sub	r24, r22
 3a6:	97 0b       	sbc	r25, r23
 3a8:	a1 09       	sbc	r26, r1
 3aa:	b1 09       	sbc	r27, r1
 3ac:	89 2f       	mov	r24, r25
 3ae:	9a 2f       	mov	r25, r26
 3b0:	ab 2f       	mov	r26, r27
 3b2:	bb 27       	eor	r27, r27
 3b4:	a7 fd       	sbrc	r26, 7
 3b6:	ba 95       	dec	r27
 3b8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <au8_Temp_For_Hight_Bit>
 3bc:	8d bd       	out	0x2d, r24	; 45
 3be:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <au8_Temp_For_Low_Bit>
 3c2:	8c bd       	out	0x2c, r24	; 44
 3c4:	9e b5       	in	r25, 0x2e	; 46
 3c6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_PreScaler_T1>
 3ca:	89 2b       	or	r24, r25
 3cc:	8e bd       	out	0x2e, r24	; 46
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	08 95       	ret
 3d2:	61 30       	cpi	r22, 0x01	; 1
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	78 07       	cpc	r23, r24
 3d8:	68 f4       	brcc	.+26     	; 0x3f4 <Timer_Start+0x86>
 3da:	61 95       	neg	r22
 3dc:	64 bd       	out	0x24, r22	; 36
 3de:	95 b5       	in	r25, 0x25	; 37
 3e0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gu8_PreScaler_T2>
 3e4:	89 2b       	or	r24, r25
 3e6:	85 bd       	out	0x25, r24	; 37
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	08 95       	ret
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	08 95       	ret
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	08 95       	ret

000003f8 <Timer_Stop>:
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	49 f0       	breq	.+18     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3fc:	18 f0       	brcs	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	82 30       	cpi	r24, 0x02	; 2
 400:	59 f0       	breq	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 402:	0f c0       	rjmp	.+30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 404:	83 b7       	in	r24, 0x33	; 51
 406:	88 7f       	andi	r24, 0xF8	; 248
 408:	83 bf       	out	0x33, r24	; 51
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	08 95       	ret
 40e:	8e b5       	in	r24, 0x2e	; 46
 410:	88 7f       	andi	r24, 0xF8	; 248
 412:	8e bd       	out	0x2e, r24	; 46
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
 418:	85 b5       	in	r24, 0x25	; 37
 41a:	88 7f       	andi	r24, 0xF8	; 248
 41c:	85 bd       	out	0x25, r24	; 37
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	08 95       	ret
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	08 95       	ret

00000426 <Timer_Set_Value>:
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	39 f0       	breq	.+14     	; 0x438 <Timer_Set_Value+0x12>
 42a:	18 f0       	brcs	.+6      	; 0x432 <Timer_Set_Value+0xc>
 42c:	82 30       	cpi	r24, 0x02	; 2
 42e:	c1 f0       	breq	.+48     	; 0x460 <Timer_Set_Value+0x3a>
 430:	1a c0       	rjmp	.+52     	; 0x466 <Timer_Set_Value+0x40>
 432:	62 bf       	out	0x32, r22	; 50
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	08 95       	ret
 438:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <au8_Temp_For_Low_Bit>
 43c:	70 93 64 00 	sts	0x0064, r23	; 0x800064 <au8_Temp_For_Hight_Bit>
 440:	8e b5       	in	r24, 0x2e	; 46
 442:	88 7f       	andi	r24, 0xF8	; 248
 444:	8e bd       	out	0x2e, r24	; 46
 446:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <au8_Temp_For_Hight_Bit>
 44a:	8d bd       	out	0x2d, r24	; 45
 44c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <au8_Temp_For_Low_Bit>
 450:	8c bd       	out	0x2c, r24	; 44
 452:	9e b5       	in	r25, 0x2e	; 46
 454:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_PreScaler_T1>
 458:	89 2b       	or	r24, r25
 45a:	8e bd       	out	0x2e, r24	; 46
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	08 95       	ret
 460:	64 bd       	out	0x24, r22	; 36
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	08 95       	ret
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	08 95       	ret

0000046a <__vector_11>:

 

 Inturrept_Function (TIMER0_OVF_vect)
 {
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
    ptr_CBF();
 48c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ptr_CBF>
 490:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ptr_CBF+0x1>
 494:	09 95       	icall
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <Timer_CB>:
		return u8_Ret_Status;
	}

	 void Timer_CB (void)
	{
		Timer_Set_Value(gu8_Ch_ID, 6);
 4b8:	66 e0       	ldi	r22, 0x06	; 6
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <gu8_Ch_ID>
 4c0:	0e 94 13 02 	call	0x426	; 0x426 <Timer_Set_Value>
		gu8_Tick_Flag = HIGH;
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gu8_Tick_Flag>
 4ca:	08 95       	ret

000004cc <TMU_Init>:

	}


	ERROR_STATUS TMU_Init (const str_TMU_InitConfig_t * pstr_ConfigPtr )
	{
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	00 d0       	rcall	.+0      	; 0x4d6 <TMU_Init+0xa>
 4d6:	00 d0       	rcall	.+0      	; 0x4d8 <TMU_Init+0xc>
 4d8:	00 d0       	rcall	.+0      	; 0x4da <TMU_Init+0xe>
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
		uint8_t Error = NO_ERROR;
		if (pstr_ConfigPtr!= NULL)
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	e9 f0       	breq	.+58     	; 0x51c <TMU_Init+0x50>
		{
			if (str_FuncStatus.u8_Init_Flag == NOT_INITIALIZED)
 4e2:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <str_FuncStatus>
 4e6:	21 11       	cpse	r18, r1
 4e8:	1b c0       	rjmp	.+54     	; 0x520 <TMU_Init+0x54>
 4ea:	8c 01       	movw	r16, r24
			{
				/* set TMU status, already initialized */
				str_FuncStatus.u8_Init_Flag= INITIALIZED;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <str_FuncStatus>

				/*Timer Configurations*/
				Timer_Cfg_ST str_TimerCfg;
				str_TimerCfg.Timer_Ch = (pstr_ConfigPtr->u8_Timer_Id);
 4f2:	f8 01       	movw	r30, r16
 4f4:	90 81       	ld	r25, Z
 4f6:	99 83       	std	Y+1, r25	; 0x01
				str_TimerCfg.Timer_Mode = TIMER_MODE;
 4f8:	8a 83       	std	Y+2, r24	; 0x02
				str_TimerCfg.Timer_PreScaler = PRESCALER_64;
 4fa:	94 e0       	ldi	r25, 0x04	; 4
 4fc:	9b 83       	std	Y+3, r25	; 0x03
				str_TimerCfg.Timer_Interrupt_Mode = TIMER_MODE_INTERRUPT;
 4fe:	8c 83       	std	Y+4, r24	; 0x04
				str_TimerCfg.Ptr_TCB_Function = Timer_CB;
 500:	8c e5       	ldi	r24, 0x5C	; 92
 502:	92 e0       	ldi	r25, 0x02	; 2
 504:	9e 83       	std	Y+6, r25	; 0x06
 506:	8d 83       	std	Y+5, r24	; 0x05
				Timer_Init(&str_TimerCfg);
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	0e 94 c9 00 	call	0x192	; 0x192 <Timer_Init>
				gu8_Ch_ID = pstr_ConfigPtr->u8_Timer_Id;
 510:	f8 01       	movw	r30, r16
 512:	80 81       	ld	r24, Z
 514:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <gu8_Ch_ID>
	}


	ERROR_STATUS TMU_Init (const str_TMU_InitConfig_t * pstr_ConfigPtr )
	{
		uint8_t Error = NO_ERROR;
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	03 c0       	rjmp	.+6      	; 0x522 <TMU_Init+0x56>
			
			
		}
		else
		{
			Error = ERROR_NULL_POINTER;
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	01 c0       	rjmp	.+2      	; 0x522 <TMU_Init+0x56>
				Timer_Init(&str_TimerCfg);
				gu8_Ch_ID = pstr_ConfigPtr->u8_Timer_Id;
			}
			else
			{
				Error = ERROR_ALREADY_INITIALIZED;
 520:	84 e0       	ldi	r24, 0x04	; 4
		{
			Error = ERROR_NULL_POINTER;
		}
		return Error;
		
	}
 522:	26 96       	adiw	r28, 0x06	; 6
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	f8 94       	cli
 528:	de bf       	out	0x3e, r29	; 62
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	cd bf       	out	0x3d, r28	; 61
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	1f 91       	pop	r17
 534:	0f 91       	pop	r16
 536:	08 95       	ret

00000538 <TMU_Dispatch>:

	ERROR_STATUS TMU_Dispatch(void)
	{
 538:	ef 92       	push	r14
 53a:	ff 92       	push	r15
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
		uint8_t u8_Buffer_Index=0;
		static uint8_t u8_Flag=0;
		uint8_t Error = NO_ERROR;
		if (HIGH == gu8_Tick_Flag)
 544:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Tick_Flag>
 548:	8f 3f       	cpi	r24, 0xFF	; 255
 54a:	11 f5       	brne	.+68     	; 0x590 <TMU_Dispatch+0x58>
		{for (u8_Buffer_Index=0;u8_Buffer_Index<TMU_BUFFER_SIZE && u8_Flag<gu8_Buffer_Counter;u8_Buffer_Index++)
 54c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <gu8_Buffer_Counter>
 550:	88 23       	and	r24, r24
 552:	e1 f0       	breq	.+56     	; 0x58c <TMU_Dispatch+0x54>
 554:	c0 e7       	ldi	r28, 0x70	; 112
 556:	d0 e0       	ldi	r29, 0x00	; 0
 558:	00 e8       	ldi	r16, 0x80	; 128
 55a:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(arrstr_TMU_Buffer[u8_Buffer_Index].u8_Duty == USED)
 55c:	88 81       	ld	r24, Y
 55e:	81 30       	cpi	r24, 0x01	; 1
 560:	69 f4       	brne	.+26     	; 0x57c <TMU_Dispatch+0x44>
			{
				arrstr_TMU_Buffer[u8_Buffer_Index].u8_Pre_Flag++;
 562:	8e 81       	ldd	r24, Y+6	; 0x06
 564:	8f 5f       	subi	r24, 0xFF	; 255
 566:	8e 83       	std	Y+6, r24	; 0x06
				if  (arrstr_TMU_Buffer[u8_Buffer_Index].u8_Pre_Flag == (arrstr_TMU_Buffer[u8_Buffer_Index].u8_Delay_Time) )
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	29 81       	ldd	r18, Y+1	; 0x01
 56c:	3a 81       	ldd	r19, Y+2	; 0x02
 56e:	82 17       	cp	r24, r18
 570:	93 07       	cpc	r25, r19
 572:	21 f4       	brne	.+8      	; 0x57c <TMU_Dispatch+0x44>
				{
					
					arrstr_TMU_Buffer[u8_Buffer_Index].Ptr_Consumer();
 574:	ec 81       	ldd	r30, Y+4	; 0x04
 576:	fd 81       	ldd	r31, Y+5	; 0x05
 578:	09 95       	icall
					arrstr_TMU_Buffer[u8_Buffer_Index].u8_Pre_Flag = 0;
 57a:	1e 82       	std	Y+6, r1	; 0x06
	{
		uint8_t u8_Buffer_Index=0;
		static uint8_t u8_Flag=0;
		uint8_t Error = NO_ERROR;
		if (HIGH == gu8_Tick_Flag)
		{for (u8_Buffer_Index=0;u8_Buffer_Index<TMU_BUFFER_SIZE && u8_Flag<gu8_Buffer_Counter;u8_Buffer_Index++)
 57c:	c0 17       	cp	r28, r16
 57e:	d1 07       	cpc	r29, r17
 580:	29 f0       	breq	.+10     	; 0x58c <TMU_Dispatch+0x54>
 582:	28 96       	adiw	r28, 0x08	; 8
 584:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <gu8_Buffer_Counter>
 588:	81 11       	cpse	r24, r1
 58a:	e8 cf       	rjmp	.-48     	; 0x55c <TMU_Dispatch+0x24>
// 					}
					
				}
			}
		}
		gu8_Tick_Flag = LOW;
 58c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <gu8_Tick_Flag>
		}
		
		return Error;
	}
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	ff 90       	pop	r15
 59c:	ef 90       	pop	r14
 59e:	08 95       	ret

000005a0 <TMU_Stop>:

	/*implementation of local functions*/
	static ERROR_STATUS Is_Buffer_Empty(void)
	{
		uint8_t u8_Ret_Status = FALSE;
		if (gu8_Buffer_Counter == 0)
 5a0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <gu8_Buffer_Counter>
   ERROR_STATUS TMU_Stop(uint8_t Task_Id, void(* Ptr_Func)(void))
	{
		uint8_t au8_Search_Loop_Counter = ZERO;
		uint8_t Error = NO_ERROR;

		if (FALSE == Is_Buffer_Empty())
 5a4:	99 23       	and	r25, r25
 5a6:	71 f1       	breq	.+92     	; 0x604 <TMU_Stop+0x64>
 5a8:	e0 e7       	ldi	r30, 0x70	; 112
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	20 e0       	ldi	r18, 0x00	; 0
 5ae:	30 e0       	ldi	r19, 0x00	; 0
		   /* Search for about given task*/
		   for (au8_Search_Loop_Counter = ZERO; au8_Search_Loop_Counter < TMU_BUFFER_SIZE; au8_Search_Loop_Counter ++)
		   {
			   
			   /*Check if this task is the desired to stop*/
			   if ((Task_Id == arrstr_TMU_Buffer[au8_Search_Loop_Counter].u8_Task_ID) && (Ptr_Func == arrstr_TMU_Buffer[au8_Search_Loop_Counter].Ptr_Consumer))
 5b0:	d9 01       	movw	r26, r18
 5b2:	47 81       	ldd	r20, Z+7	; 0x07
 5b4:	48 13       	cpse	r20, r24
 5b6:	19 c0       	rjmp	.+50     	; 0x5ea <TMU_Stop+0x4a>
 5b8:	44 81       	ldd	r20, Z+4	; 0x04
 5ba:	55 81       	ldd	r21, Z+5	; 0x05
 5bc:	46 17       	cp	r20, r22
 5be:	57 07       	cpc	r21, r23
 5c0:	a1 f4       	brne	.+40     	; 0x5ea <TMU_Stop+0x4a>
			   {
				   /*stop the task*/
					arrstr_TMU_Buffer[au8_Search_Loop_Counter].u8_Duty = NOT_USED;
 5c2:	aa 0f       	add	r26, r26
 5c4:	bb 1f       	adc	r27, r27
 5c6:	aa 0f       	add	r26, r26
 5c8:	bb 1f       	adc	r27, r27
 5ca:	aa 0f       	add	r26, r26
 5cc:	bb 1f       	adc	r27, r27
 5ce:	a0 59       	subi	r26, 0x90	; 144
 5d0:	bf 4f       	sbci	r27, 0xFF	; 255
 5d2:	1c 92       	st	X, r1
					arrstr_TMU_Buffer[au8_Search_Loop_Counter].Ptr_Consumer = NULL;
 5d4:	15 96       	adiw	r26, 0x05	; 5
 5d6:	1c 92       	st	X, r1
 5d8:	1e 92       	st	-X, r1
 5da:	14 97       	sbiw	r26, 0x04	; 4
					/*decrease the buffer*/
					gu8_Buffer_Counter --;
 5dc:	91 50       	subi	r25, 0x01	; 1
 5de:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <gu8_Buffer_Counter>
				   break;
			   }
		   }
			/*if the buffer empty after this decrease stop the timer to stop receiving timer interrupt */
			if (TRUE == Is_Buffer_Empty())
 5e2:	99 23       	and	r25, r25
 5e4:	51 f0       	breq	.+20     	; 0x5fa <TMU_Stop+0x5a>
	}
	
   ERROR_STATUS TMU_Stop(uint8_t Task_Id, void(* Ptr_Func)(void))
	{
		uint8_t au8_Search_Loop_Counter = ZERO;
		uint8_t Error = NO_ERROR;
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	08 95       	ret
 5ea:	2f 5f       	subi	r18, 0xFF	; 255
 5ec:	3f 4f       	sbci	r19, 0xFF	; 255
 5ee:	38 96       	adiw	r30, 0x08	; 8

		if (FALSE == Is_Buffer_Empty())
		{
		   /* Search for about given task*/
		   for (au8_Search_Loop_Counter = ZERO; au8_Search_Loop_Counter < TMU_BUFFER_SIZE; au8_Search_Loop_Counter ++)
 5f0:	23 30       	cpi	r18, 0x03	; 3
 5f2:	31 05       	cpc	r19, r1
 5f4:	e9 f6       	brne	.-70     	; 0x5b0 <TMU_Stop+0x10>
	}
	
   ERROR_STATUS TMU_Stop(uint8_t Task_Id, void(* Ptr_Func)(void))
	{
		uint8_t au8_Search_Loop_Counter = ZERO;
		uint8_t Error = NO_ERROR;
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	08 95       	ret
				   break;
			   }
		   }
			/*if the buffer empty after this decrease stop the timer to stop receiving timer interrupt */
			if (TRUE == Is_Buffer_Empty())
					Timer_Stop(Timer_0);
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Timer_Stop>
	}
	
   ERROR_STATUS TMU_Stop(uint8_t Task_Id, void(* Ptr_Func)(void))
	{
		uint8_t au8_Search_Loop_Counter = ZERO;
		uint8_t Error = NO_ERROR;
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	08 95       	ret
		} 

		
		else
		{
		   Error = ERROR_EMPTY_BUFFER;
 604:	89 e0       	ldi	r24, 0x09	; 9
		}
		return Error;	
	}
 606:	08 95       	ret

00000608 <TMU_Start>:

	ERROR_STATUS TMU_Start (uint16_t Time_Delay,uint8_t Task_Id, uint8_t Repeat, void(* Ptr_Func)(void))
  {
 608:	0f 93       	push	r16
 60a:	1f 93       	push	r17
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	fc 01       	movw	r30, r24
	  uint8_t au8_Search_Loop_Counter = ZERO;
	  sint8_t aS8_Empty_Buffer_Location = EMPTY_BUFFER_LOCATION_INITIAL_VALUE;
	  uint8_t au8_Already_Started = NOT_INITIALIZED;
	  uint8_t Error = NO_ERROR;

	  if (INITIALIZED == str_FuncStatus.u8_Init_Flag)
 612:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <str_FuncStatus>
 616:	91 30       	cpi	r25, 0x01	; 1
 618:	79 f5       	brne	.+94     	; 0x678 <TMU_Start+0x70>
	}

	static ERROR_STATUS Is_Buffer_Full(void)
	{
		uint8_t u8_Ret_Status = FALSE;
		if (gu8_Buffer_Counter == TMU_BUFFER_SIZE)
 61a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <gu8_Buffer_Counter>
	  uint8_t au8_Already_Started = NOT_INITIALIZED;
	  uint8_t Error = NO_ERROR;

	  if (INITIALIZED == str_FuncStatus.u8_Init_Flag)
	  {
	     if (FALSE == Is_Buffer_Full())
 61e:	93 30       	cpi	r25, 0x03	; 3
 620:	69 f1       	breq	.+90     	; 0x67c <TMU_Start+0x74>
		  {
		      if (NULL != Ptr_Func)
 622:	21 15       	cp	r18, r1
 624:	31 05       	cpc	r19, r1
 626:	61 f1       	breq	.+88     	; 0x680 <TMU_Start+0x78>
 628:	c0 e7       	ldi	r28, 0x70	; 112
 62a:	d0 e0       	ldi	r29, 0x00	; 0
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	de 01       	movw	r26, r28
			      
			      /* Search for empty location and if the consumer is already started in the TMU buffer*/
			      for (au8_Search_Loop_Counter = ZERO; au8_Search_Loop_Counter < TMU_BUFFER_SIZE; au8_Search_Loop_Counter ++)
			      {
				      /* save the first empty location in TMU buffer*/
				      if ((NOT_USED == arrstr_TMU_Buffer[au8_Search_Loop_Counter].u8_Duty) && (aS8_Empty_Buffer_Location == EMPTY_BUFFER_LOCATION_INITIAL_VALUE))
 632:	58 81       	ld	r21, Y
 634:	51 11       	cpse	r21, r1
 636:	03 c0       	rjmp	.+6      	; 0x63e <TMU_Start+0x36>
 638:	71 11       	cpse	r23, r1
 63a:	01 c0       	rjmp	.+2      	; 0x63e <TMU_Start+0x36>
				      {
					      aS8_Empty_Buffer_Location = au8_Search_Loop_Counter;
 63c:	78 2f       	mov	r23, r24
				      }
				      /*Check if the consumer is pre started with the same ID*/
				      if ((Task_Id == arrstr_TMU_Buffer[au8_Search_Loop_Counter].u8_Task_ID) && (Ptr_Func == arrstr_TMU_Buffer[au8_Search_Loop_Counter].Ptr_Consumer))
 63e:	17 96       	adiw	r26, 0x07	; 7
 640:	5c 91       	ld	r21, X
 642:	17 97       	sbiw	r26, 0x07	; 7
 644:	56 13       	cpse	r21, r22
 646:	07 c0       	rjmp	.+14     	; 0x656 <TMU_Start+0x4e>
 648:	14 96       	adiw	r26, 0x04	; 4
 64a:	0d 91       	ld	r16, X+
 64c:	1c 91       	ld	r17, X
 64e:	15 97       	sbiw	r26, 0x05	; 5
 650:	20 17       	cp	r18, r16
 652:	31 07       	cpc	r19, r17
 654:	b9 f0       	breq	.+46     	; 0x684 <TMU_Start+0x7c>
		  {
		      if (NULL != Ptr_Func)
		      {
			      
			      /* Search for empty location and if the consumer is already started in the TMU buffer*/
			      for (au8_Search_Loop_Counter = ZERO; au8_Search_Loop_Counter < TMU_BUFFER_SIZE; au8_Search_Loop_Counter ++)
 656:	8f 5f       	subi	r24, 0xFF	; 255
 658:	28 96       	adiw	r28, 0x08	; 8
 65a:	83 30       	cpi	r24, 0x03	; 3
 65c:	49 f7       	brne	.-46     	; 0x630 <TMU_Start+0x28>
 65e:	15 c0       	rjmp	.+42     	; 0x68a <TMU_Start+0x82>
				      str_Buffer.u8_Task_ID = Task_Id;
				      
				      /*Insert the created struct for the new creator in the TMU buffer*/
				      arrstr_TMU_Buffer[aS8_Empty_Buffer_Location] = str_Buffer;
				      if (TRUE == Is_Buffer_Empty())
				      Timer_Start(Timer_0,250);
 660:	6a ef       	ldi	r22, 0xFA	; 250
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0e 94 b7 01 	call	0x36e	; 0x36e <Timer_Start>
						gu8_Buffer_Counter++;
 66a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <gu8_Buffer_Counter>
 66e:	8f 5f       	subi	r24, 0xFF	; 255
 670:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <gu8_Buffer_Counter>
  {
     /*variable for linear search algorithm*/
	  uint8_t au8_Search_Loop_Counter = ZERO;
	  sint8_t aS8_Empty_Buffer_Location = EMPTY_BUFFER_LOCATION_INITIAL_VALUE;
	  uint8_t au8_Already_Started = NOT_INITIALIZED;
	  uint8_t Error = NO_ERROR;
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	24 c0       	rjmp	.+72     	; 0x6c0 <TMU_Start+0xb8>
		  
	  }

	  
	  else
	  Error = ERROR_NOT_INITIALIZED;
 678:	83 e0       	ldi	r24, 0x03	; 3
 67a:	22 c0       	rjmp	.+68     	; 0x6c0 <TMU_Start+0xb8>
				
		  }

		  
		  else
		  Error = ERROR_FULL_BUFFER;
 67c:	87 e0       	ldi	r24, 0x07	; 7
 67e:	20 c0       	rjmp	.+64     	; 0x6c0 <TMU_Start+0xb8>

				}

				
				else
				Error = ERROR_NULL_POINTER;
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	1e c0       	rjmp	.+60     	; 0x6c0 <TMU_Start+0xb8>
			      }
					//else for restart same task
			      else if (au8_Already_Started == INITIALIZED)
			      {
				      aS8_Empty_Buffer_Location = EMPTY_BUFFER_LOCATION_INITIAL_VALUE;
				      SET_BIT(PORTA_DATA,BIT6);
 684:	de 9a       	sbi	0x1b, 6	; 27
  {
     /*variable for linear search algorithm*/
	  uint8_t au8_Search_Loop_Counter = ZERO;
	  sint8_t aS8_Empty_Buffer_Location = EMPTY_BUFFER_LOCATION_INITIAL_VALUE;
	  uint8_t au8_Already_Started = NOT_INITIALIZED;
	  uint8_t Error = NO_ERROR;
 686:	80 e0       	ldi	r24, 0x00	; 0
	  
	  else
	  Error = ERROR_NOT_INITIALIZED;
	  
	  
	  return Error;
 688:	1b c0       	rjmp	.+54     	; 0x6c0 <TMU_Start+0xb8>
				      str_Buffer.Ptr_Consumer =  Ptr_Func;
				      str_Buffer.u8_Pre_Flag = 1;
				      str_Buffer.u8_Task_ID = Task_Id;
				      
				      /*Insert the created struct for the new creator in the TMU buffer*/
				      arrstr_TMU_Buffer[aS8_Empty_Buffer_Location] = str_Buffer;
 68a:	88 e0       	ldi	r24, 0x08	; 8
 68c:	78 02       	muls	r23, r24
 68e:	d0 01       	movw	r26, r0
 690:	11 24       	eor	r1, r1
 692:	a0 59       	subi	r26, 0x90	; 144
 694:	bf 4f       	sbci	r27, 0xFF	; 255
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	8c 93       	st	X, r24
 69a:	12 96       	adiw	r26, 0x02	; 2
 69c:	fc 93       	st	X, r31
 69e:	ee 93       	st	-X, r30
 6a0:	11 97       	sbiw	r26, 0x01	; 1
 6a2:	13 96       	adiw	r26, 0x03	; 3
 6a4:	4c 93       	st	X, r20
 6a6:	13 97       	sbiw	r26, 0x03	; 3
 6a8:	15 96       	adiw	r26, 0x05	; 5
 6aa:	3c 93       	st	X, r19
 6ac:	2e 93       	st	-X, r18
 6ae:	14 97       	sbiw	r26, 0x04	; 4
 6b0:	16 96       	adiw	r26, 0x06	; 6
 6b2:	8c 93       	st	X, r24
 6b4:	16 97       	sbiw	r26, 0x06	; 6
 6b6:	17 96       	adiw	r26, 0x07	; 7
 6b8:	6c 93       	st	X, r22
				      if (TRUE == Is_Buffer_Empty())
 6ba:	91 11       	cpse	r25, r1
 6bc:	d6 cf       	rjmp	.-84     	; 0x66a <TMU_Start+0x62>
 6be:	d0 cf       	rjmp	.-96     	; 0x660 <TMU_Start+0x58>
	  else
	  Error = ERROR_NOT_INITIALIZED;
	  
	  
	  return Error;
  }
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	1f 91       	pop	r17
 6c6:	0f 91       	pop	r16
 6c8:	08 95       	ret

000006ca <__tablejump2__>:
 6ca:	ee 0f       	add	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	05 90       	lpm	r0, Z+
 6d0:	f4 91       	lpm	r31, Z
 6d2:	e0 2d       	mov	r30, r0
 6d4:	09 94       	ijmp

000006d6 <_exit>:
 6d6:	f8 94       	cli

000006d8 <__stop_program>:
 6d8:	ff cf       	rjmp	.-2      	; 0x6d8 <__stop_program>
